//+build ignore

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	pkg := os.Getenv("GOPACKAGE")
	out := "palette_gen.go"

	var buf bytes.Buffer

	buf.WriteString("// Code generated by 'genpalette.go'. DO NOT EDIT.\n")
	buf.WriteString("\n")
	buf.WriteString("package " + pkg + "\n\n")
	buf.WriteString("import (\n")
	buf.WriteString("\t" + `"image/color"` + "\n")
	buf.WriteString(")\n\n")

	var pal, rgb, bts, str, num bytes.Buffer
	pal.WriteString("var Palette = color.Palette{\n")
	rgb.WriteString("var RGBA = []color.RGBA{\n")
	bts.WriteString("var codeBytes = [255][]byte{")
	str.WriteString("var codeString = [255]string{")
	num.WriteString("var codeInt = [255]uint8{")

	addCol := func(code, rv, gv, bv int) {
		bts.WriteString(fmt.Sprintf(`[]byte("%d"), `, code))
		str.WriteString(fmt.Sprintf(`"%d", `, code))
		num.WriteString(fmt.Sprintf(`%d, `, code))

		rgbCol := fmt.Sprintf(`color.RGBA{R: 0x%02x, G: 0x%02x, B: 0x%02x, A: 0xff}`, rv, gv, bv)
		pal.WriteString(fmt.Sprintf("\t%s,\n", rgbCol))
		rgb.WriteString(fmt.Sprintf("\t%s,\n", rgbCol))
	}

	// Colors 16-231 are a 6x6x6 color cube
	for r := 0; r < 6; r++ {
		for g := 0; g < 6; g++ {
			for b := 0; b < 6; b++ {
				code := 16 + (r * 36) + (g * 6) + b

				rv := 0
				if r > 0 {
					rv = r*40 + 55
				}
				gv := 0
				if g > 0 {
					gv = g*40 + 55
				}
				bv := 0
				if b > 0 {
					bv = b*40 + 55
				}

				addCol(code, rv, gv, bv)
			}
		}
	}

	// colors 232-255 are a grayscale ramp, intentionally leaving out
	// black and white
	for gr := 0; gr < 24; gr++ {
		lv := (gr * 10) + 8
		code := 232 + gr
		addCol(code, lv, lv, lv)
	}

	rgb.WriteString("}\n\n")
	pal.WriteString("}\n\n")
	bts.WriteString("}\n\n")
	str.WriteString("}\n\n")
	num.WriteString("}\n\n")

	buf.Write(pal.Bytes())
	buf.Write(rgb.Bytes())
	buf.Write(bts.Bytes())
	buf.Write(str.Bytes())
	buf.Write(num.Bytes())

	orig, err := ioutil.ReadFile(out)
	if err != nil && !os.IsNotExist(err) {
		return err
	}

	if bytes.Compare(orig, buf.Bytes()) != 0 {
		return ioutil.WriteFile(out, buf.Bytes(), 0644)
	}

	return nil
}
