// Code generated by 'github.com/shabbyrobe/sortnet/cmd/sortnetgen'. DO NOT EDIT.

package rgba

// networkSortInt sorts the input according to its length ('sz') using a sorting network, if
// one is available. If the sort was applied, 'ok' is true, otherwise it is false to allow
// you to perform your own sort as a fallback.
//
func networkSortInt(a []int, sz int) (ok bool) {
	switch sz {
	case 2:
		networkSort2xInt(a)
	case 3:
		networkSort3xInt(a)
	case 4:
		networkSort4xInt(a)
	case 5:
		networkSort5xInt(a)
	case 6:
		networkSort6xInt(a)
	case 7:
		networkSort7xInt(a)
	case 8:
		networkSort8xInt(a)
	case 9:
		networkSort9xInt(a)
	case 10:
		networkSort10xInt(a)
	case 11:
		networkSort11xInt(a)
	case 12:
		networkSort12xInt(a)
	case 13:
		networkSort13xInt(a)
	case 14:
		networkSort14xInt(a)
	case 15:
		networkSort15xInt(a)
	case 16:
		networkSort16xInt(a)
	default:
		return false
	}
	return true
}

func networkSort2xInt(a []int) {
	_ = a[1]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
}

func networkSort3xInt(a []int) {
	_ = a[2]
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
}

func networkSort4xInt(a []int) {
	_ = a[3]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
}

func networkSort5xInt(a []int) {
	_ = a[4]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[0] > a[3] {
		a[0], a[3] = a[3], a[0]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
}

func networkSort6xInt(a []int) {
	_ = a[5]
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[0] > a[3] {
		a[0], a[3] = a[3], a[0]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[2] > a[5] {
		a[2], a[5] = a[5], a[2]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
}

func networkSort7xInt(a []int) {
	_ = a[6]
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[0] > a[3] {
		a[0], a[3] = a[3], a[0]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[2] > a[5] {
		a[2], a[5] = a[5], a[2]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
}

func networkSort8xInt(a []int) {
	_ = a[7]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[3] > a[6] {
		a[3], a[6] = a[6], a[3]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
}

func networkSort9xInt(a []int) {
	_ = a[8]
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[0] > a[5] {
		a[0], a[5] = a[5], a[0]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[0] > a[7] {
		a[0], a[7] = a[7], a[0]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[5] > a[8] {
		a[5], a[8] = a[8], a[5]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[2] > a[7] {
		a[2], a[7] = a[7], a[2]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
}

func networkSort10xInt(a []int) {
	_ = a[9]
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[0] > a[9] {
		a[0], a[9] = a[9], a[0]
	}
	if a[2] > a[5] {
		a[2], a[5] = a[5], a[2]
	}
	if a[0] > a[7] {
		a[0], a[7] = a[7], a[0]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[3] > a[6] {
		a[3], a[6] = a[6], a[3]
	}
	if a[4] > a[9] {
		a[4], a[9] = a[9], a[4]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[6] > a[9] {
		a[6], a[9] = a[9], a[6]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[4] > a[7] {
		a[4], a[7] = a[7], a[4]
	}
	if a[1] > a[8] {
		a[1], a[8] = a[8], a[1]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[8] {
		a[5], a[8] = a[8], a[5]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[2] > a[5] {
		a[2], a[5] = a[5], a[2]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
}

func networkSort11xInt(a []int) {
	_ = a[10]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[6] > a[10] {
		a[6], a[10] = a[10], a[6]
	}
	if a[5] > a[9] {
		a[5], a[9] = a[9], a[5]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[6] > a[10] {
		a[6], a[10] = a[10], a[6]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[4] > a[8] {
		a[4], a[8] = a[8], a[4]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[10] {
		a[7], a[10] = a[10], a[7]
	}
	if a[3] > a[8] {
		a[3], a[8] = a[8], a[3]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[7] > a[9] {
		a[7], a[9] = a[9], a[7]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
}

func networkSort12xInt(a []int) {
	_ = a[11]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[6] > a[10] {
		a[6], a[10] = a[10], a[6]
	}
	if a[5] > a[9] {
		a[5], a[9] = a[9], a[5]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[6] > a[10] {
		a[6], a[10] = a[10], a[6]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[7] > a[11] {
		a[7], a[11] = a[11], a[7]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[4] > a[8] {
		a[4], a[8] = a[8], a[4]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[7] > a[11] {
		a[7], a[11] = a[11], a[7]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[10] {
		a[7], a[10] = a[10], a[7]
	}
	if a[3] > a[8] {
		a[3], a[8] = a[8], a[3]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[7] > a[9] {
		a[7], a[9] = a[9], a[7]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
}

func networkSort13xInt(a []int) {
	_ = a[12]
	if a[1] > a[7] {
		a[1], a[7] = a[7], a[1]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[8] {
		a[5], a[8] = a[8], a[5]
	}
	if a[0] > a[12] {
		a[0], a[12] = a[12], a[0]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[11] {
		a[8], a[11] = a[11], a[8]
	}
	if a[7] > a[12] {
		a[7], a[12] = a[12], a[7]
	}
	if a[5] > a[9] {
		a[5], a[9] = a[9], a[5]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[6] > a[12] {
		a[6], a[12] = a[12], a[6]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[11] > a[12] {
		a[11], a[12] = a[12], a[11]
	}
	if a[4] > a[9] {
		a[4], a[9] = a[9], a[4]
	}
	if a[6] > a[10] {
		a[6], a[10] = a[10], a[6]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[1] > a[7] {
		a[1], a[7] = a[7], a[1]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[4] > a[7] {
		a[4], a[7] = a[7], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[0] > a[5] {
		a[0], a[5] = a[5], a[0]
	}
	if a[2] > a[5] {
		a[2], a[5] = a[5], a[2]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
}

func networkSort14xInt(a []int) {
	_ = a[13]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[12] > a[13] {
		a[12], a[13] = a[13], a[12]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[8] > a[12] {
		a[8], a[12] = a[12], a[8]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[9] > a[13] {
		a[9], a[13] = a[13], a[9]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[0] > a[8] {
		a[0], a[8] = a[8], a[0]
	}
	if a[1] > a[9] {
		a[1], a[9] = a[9], a[1]
	}
	if a[2] > a[10] {
		a[2], a[10] = a[10], a[2]
	}
	if a[3] > a[11] {
		a[3], a[11] = a[11], a[3]
	}
	if a[4] > a[12] {
		a[4], a[12] = a[12], a[4]
	}
	if a[5] > a[13] {
		a[5], a[13] = a[13], a[5]
	}
	if a[5] > a[10] {
		a[5], a[10] = a[10], a[5]
	}
	if a[6] > a[9] {
		a[6], a[9] = a[9], a[6]
	}
	if a[3] > a[12] {
		a[3], a[12] = a[12], a[3]
	}
	if a[7] > a[11] {
		a[7], a[11] = a[11], a[7]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[4] > a[8] {
		a[4], a[8] = a[8], a[4]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[13] {
		a[7], a[13] = a[13], a[7]
	}
	if a[2] > a[8] {
		a[2], a[8] = a[8], a[2]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[13] {
		a[11], a[13] = a[13], a[11]
	}
	if a[3] > a[8] {
		a[3], a[8] = a[8], a[3]
	}
	if a[7] > a[12] {
		a[7], a[12] = a[12], a[7]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[10] > a[12] {
		a[10], a[12] = a[12], a[10]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[7] > a[9] {
		a[7], a[9] = a[9], a[7]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[12] {
		a[11], a[12] = a[12], a[11]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
}

func networkSort15xInt(a []int) {
	_ = a[14]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[12] > a[13] {
		a[12], a[13] = a[13], a[12]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[12] > a[14] {
		a[12], a[14] = a[14], a[12]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[8] > a[12] {
		a[8], a[12] = a[12], a[8]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[9] > a[13] {
		a[9], a[13] = a[13], a[9]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[10] > a[14] {
		a[10], a[14] = a[14], a[10]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[0] > a[8] {
		a[0], a[8] = a[8], a[0]
	}
	if a[1] > a[9] {
		a[1], a[9] = a[9], a[1]
	}
	if a[2] > a[10] {
		a[2], a[10] = a[10], a[2]
	}
	if a[3] > a[11] {
		a[3], a[11] = a[11], a[3]
	}
	if a[4] > a[12] {
		a[4], a[12] = a[12], a[4]
	}
	if a[5] > a[13] {
		a[5], a[13] = a[13], a[5]
	}
	if a[6] > a[14] {
		a[6], a[14] = a[14], a[6]
	}
	if a[5] > a[10] {
		a[5], a[10] = a[10], a[5]
	}
	if a[6] > a[9] {
		a[6], a[9] = a[9], a[6]
	}
	if a[3] > a[12] {
		a[3], a[12] = a[12], a[3]
	}
	if a[13] > a[14] {
		a[13], a[14] = a[14], a[13]
	}
	if a[7] > a[11] {
		a[7], a[11] = a[11], a[7]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[4] > a[8] {
		a[4], a[8] = a[8], a[4]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[13] {
		a[7], a[13] = a[13], a[7]
	}
	if a[2] > a[8] {
		a[2], a[8] = a[8], a[2]
	}
	if a[11] > a[14] {
		a[11], a[14] = a[14], a[11]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[13] {
		a[11], a[13] = a[13], a[11]
	}
	if a[3] > a[8] {
		a[3], a[8] = a[8], a[3]
	}
	if a[7] > a[12] {
		a[7], a[12] = a[12], a[7]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[10] > a[12] {
		a[10], a[12] = a[12], a[10]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[7] > a[9] {
		a[7], a[9] = a[9], a[7]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[12] {
		a[11], a[12] = a[12], a[11]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
}

func networkSort16xInt(a []int) {
	_ = a[15]
	if a[0] > a[1] {
		a[0], a[1] = a[1], a[0]
	}
	if a[2] > a[3] {
		a[2], a[3] = a[3], a[2]
	}
	if a[4] > a[5] {
		a[4], a[5] = a[5], a[4]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
	if a[10] > a[11] {
		a[10], a[11] = a[11], a[10]
	}
	if a[12] > a[13] {
		a[12], a[13] = a[13], a[12]
	}
	if a[14] > a[15] {
		a[14], a[15] = a[15], a[14]
	}
	if a[0] > a[2] {
		a[0], a[2] = a[2], a[0]
	}
	if a[4] > a[6] {
		a[4], a[6] = a[6], a[4]
	}
	if a[8] > a[10] {
		a[8], a[10] = a[10], a[8]
	}
	if a[12] > a[14] {
		a[12], a[14] = a[14], a[12]
	}
	if a[1] > a[3] {
		a[1], a[3] = a[3], a[1]
	}
	if a[5] > a[7] {
		a[5], a[7] = a[7], a[5]
	}
	if a[9] > a[11] {
		a[9], a[11] = a[11], a[9]
	}
	if a[13] > a[15] {
		a[13], a[15] = a[15], a[13]
	}
	if a[0] > a[4] {
		a[0], a[4] = a[4], a[0]
	}
	if a[8] > a[12] {
		a[8], a[12] = a[12], a[8]
	}
	if a[1] > a[5] {
		a[1], a[5] = a[5], a[1]
	}
	if a[9] > a[13] {
		a[9], a[13] = a[13], a[9]
	}
	if a[2] > a[6] {
		a[2], a[6] = a[6], a[2]
	}
	if a[10] > a[14] {
		a[10], a[14] = a[14], a[10]
	}
	if a[3] > a[7] {
		a[3], a[7] = a[7], a[3]
	}
	if a[11] > a[15] {
		a[11], a[15] = a[15], a[11]
	}
	if a[0] > a[8] {
		a[0], a[8] = a[8], a[0]
	}
	if a[1] > a[9] {
		a[1], a[9] = a[9], a[1]
	}
	if a[2] > a[10] {
		a[2], a[10] = a[10], a[2]
	}
	if a[3] > a[11] {
		a[3], a[11] = a[11], a[3]
	}
	if a[4] > a[12] {
		a[4], a[12] = a[12], a[4]
	}
	if a[5] > a[13] {
		a[5], a[13] = a[13], a[5]
	}
	if a[6] > a[14] {
		a[6], a[14] = a[14], a[6]
	}
	if a[7] > a[15] {
		a[7], a[15] = a[15], a[7]
	}
	if a[5] > a[10] {
		a[5], a[10] = a[10], a[5]
	}
	if a[6] > a[9] {
		a[6], a[9] = a[9], a[6]
	}
	if a[3] > a[12] {
		a[3], a[12] = a[12], a[3]
	}
	if a[13] > a[14] {
		a[13], a[14] = a[14], a[13]
	}
	if a[7] > a[11] {
		a[7], a[11] = a[11], a[7]
	}
	if a[1] > a[2] {
		a[1], a[2] = a[2], a[1]
	}
	if a[4] > a[8] {
		a[4], a[8] = a[8], a[4]
	}
	if a[1] > a[4] {
		a[1], a[4] = a[4], a[1]
	}
	if a[7] > a[13] {
		a[7], a[13] = a[13], a[7]
	}
	if a[2] > a[8] {
		a[2], a[8] = a[8], a[2]
	}
	if a[11] > a[14] {
		a[11], a[14] = a[14], a[11]
	}
	if a[2] > a[4] {
		a[2], a[4] = a[4], a[2]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[13] {
		a[11], a[13] = a[13], a[11]
	}
	if a[3] > a[8] {
		a[3], a[8] = a[8], a[3]
	}
	if a[7] > a[12] {
		a[7], a[12] = a[12], a[7]
	}
	if a[6] > a[8] {
		a[6], a[8] = a[8], a[6]
	}
	if a[10] > a[12] {
		a[10], a[12] = a[12], a[10]
	}
	if a[3] > a[5] {
		a[3], a[5] = a[5], a[3]
	}
	if a[7] > a[9] {
		a[7], a[9] = a[9], a[7]
	}
	if a[3] > a[4] {
		a[3], a[4] = a[4], a[3]
	}
	if a[5] > a[6] {
		a[5], a[6] = a[6], a[5]
	}
	if a[7] > a[8] {
		a[7], a[8] = a[8], a[7]
	}
	if a[9] > a[10] {
		a[9], a[10] = a[10], a[9]
	}
	if a[11] > a[12] {
		a[11], a[12] = a[12], a[11]
	}
	if a[6] > a[7] {
		a[6], a[7] = a[7], a[6]
	}
	if a[8] > a[9] {
		a[8], a[9] = a[9], a[8]
	}
}
